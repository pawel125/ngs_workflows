import pandas as pd
import os

os.makedirs("outputs", exist_ok=True)

samples = pd.read_csv("mutect_pipeline_table.tsv", delimiter='\t')
patients = samples.patient.unique().tolist()
patients = ["P1", "P2", "P3", "P4", "P8"]

intervals = glob_wildcards('/home/pkus/resources/gatk/scattered_intervals_100/{interval}-scattered.interval_list').interval
###################################################
############ MAIN #################################
###################################################

localrules: all

rule all:
    input:
        expand("variants/{patient}.raw.vcf.gz", patient = patients),
        expand("variants/{patient}.annot.vcf", patient = patients),


##############################
############ Mutect2 part
##############################

# get only 2 tumor samples to speed up
#def get_patient_bams_reduced(patient):
#    normal = samples.query('patient == "%s" and tumor_normal == "normal"' % patient).sample_name
#    tumor = ["%s_CTC_1_WES" % patient, "%s_CTC_2_WES" % patient]
#    names = normal.tolist() + tumor
#    bams = ["bams/%s.final.bam" % s for s in names]
#    return(bams)

def get_patient_bams(patient):
    names = samples.query('patient == "%s"' % patient).sample_name
    bams = ["/home/pkus/data/LUAD_LUSC_Wang_2013/bams/%s.final.bam" % s for s in names]
    return(bams)

def get_patient_tumor_samples(patient):
    q = 'patient == "%s" and tumor_normal == "tumor"' % patient
    names = samples.query(q).sample_name
    return(names)

def get_patient_normal_samples(patient):
    q = 'patient == "%s" and tumor_normal == "normal"' % patient
    names = samples.query(q).sample_name
    return(names)

rule mutect2:
    input: lambda wildcards: get_patient_bams(wildcards.patient)
    output:
        vcf = "temp/{patient}/{patient}.{interval}.vcf.gz",
        f1r2 = "temp/{patient}/{patient}.{interval}.f1r2.tar.gz",
        stats = "temp/{patient}/{patient}.{interval}.vcf.gz.stats"
    params:
        interval = "~/resources/gatk/scattered_intervals_100/{interval}-scattered.interval_list",
        input = lambda wildcards, input: " -I ".join(input),
        tumor_samples = lambda wildcards: " --tumor-sample ".join(get_patient_tumor_samples(wildcards.patient)),
        normal_samples = lambda wildcards: " --normal-sample ".join(get_patient_normal_samples(wildcards.patient))
    shell:
        """
        gatk Mutect2 \\
            -I {params.input} \\
            --normal-sample {params.normal_samples} \\
            -R ~/resources/hg38_for_bwa/hs38DH.fa \\
            -L {params.interval} \\
            --germline-resource ~/resources/gatk/af-only-gnomad.hg38.vcf.gz \\
            --f1r2-tar-gz {output.f1r2} \\
            -O {output.vcf}
        """

rule merge_vcf:
    input: ["temp/{patient}/{patient}.%s.vcf.gz" % interval for interval in intervals]
    output: "variants/{patient}.raw.vcf.gz"
    params:
        vcfs = lambda wildcards, input: " -I ".join(input)
    shell: "gatk MergeVcfs -I {params.vcfs} -O {output}"

rule merge_mutect_stats:
    input: ["temp/{patient}/{patient}.%s.vcf.gz.stats" % interval for interval in intervals]
    output: "temp/{patient}.vcf.merged_stats"
    params:
        input = lambda wildcards, input: " --stats ".join(input)
    shell:
        """
        gatk MergeMutectStats \\
            --output {output} \\
            --stats {params.input}
        """

#################################################
############ Contamination / segmentation part
#################################################

rule get_pileup_summaries:
    input: "/home/pkus/data/LUAD_LUSC_Wang_2013/bams/{sample}.final.bam"
    output: "temp/pileups/{sample}.pileups.table"
    shell:
        """
        gatk GetPileupSummaries \\
            -I {input} \\
            -L ~/resources/gatk/wgs_calling_regions.hg38.interval_list \\
            -V ~/resources/gatk/af-only-gnomad.hg38.vcf.gz \\
            -O {output}
        """

#-L {params.interval} \ \
#    params:
#        interval = "~/resources/gatk/scattered_intervals_100/{interval}-scattered.interval_list"
#    rule gather_pileups:
#    input: ["pileups/{sample}/{sample}.%s.pileups.table" % interval for interval in intervals]
#    output: "pileups/{sample}.merged_pileups.table"
#    params:
#        input = lambda wildcards, input: " -I ".join(input)
#    shell:
#        """
#        ~/programs/gatk-4.1.8.0/gatk GatherPileupSummaries \\
#            --sequence-dictionary ~/resources/hg38_for_bwa/hs38DH.dict \\
#            -I {params.input} \\
#            -O {output}
#        """

def get_paired_normal_pileups(tumor_sample):
    patient = samples.loc[samples.sample_name == tumor_sample, "patient"].tolist()[0]
    # CalculateContamination takes only one normal sample. I think that bulk is the better one
    # normal_samples = get_patient_normal_samples(patient).tolist()
    # pileups = ["temp/pileups/%s.pileups.table" % sample for sample in normal_samples]
    q = "patient == '%s' and first_choice_normal == 'yes'" % patient
    normal_sample_name = samples.query(q).sample_name.tolist()[0]
    pileups = "temp/pileups/%s.pileups.table" % normal_sample_name
    return(pileups)

rule calc_contamination:
    input:
        tumor_pileup = "temp/pileups/{sample}.pileups.table",
        normal_pileup = lambda wildcards: get_paired_normal_pileups(wildcards.sample)
    output:
        contamination = "temp/calc_contamination_output/{sample}.contamination.table",
        segments = "temp/calc_contamination_output/{sample}.segments.table"
    shell:
        """
        gatk CalculateContamination \\
            -I {input.tumor_pileup} \\
            -matched {input.normal_pileup} \\
            -segments {output.segments} \\
            -O {output.contamination}
        """

###############################################
############ Orientation bias artifacts part
###############################################

rule learn_orientation:
    input: ["temp/{patient}/{patient}.%s.f1r2.tar.gz" % interval for interval in intervals]
    output: "temp/orientation_models/{patient}.artifact_priors.tar.gz"
    params:
        input = lambda wildcards, input: " -I ".join(input)
    shell:
        """
        gatk LearnReadOrientationModel \\
            -I {params.input} \\
            -O {output}
        """

##############################
############ Filtering part
##############################

def get_contamination_tables(patient):
    # only tumor bulk!
    q = 'patient == "%s" and tumor_normal == "tumor" and sc_bulk == "bulk"' % patient
    tumor_bulk_samples = samples.query(q).sample_name
    tables = ["temp/calc_contamination_output/%s.contamination.table" % sample for sample in tumor_bulk_samples]
    return(tables)

def get_segments_tables(patient):
    # all tumor samples
    tumor_samples = get_patient_tumor_samples(patient)
    tables = ["temp/calc_contamination_output/%s.segments.table" % sample for sample in tumor_samples]
    return(tables)

rule filter_calls:
    input:
        vcf = "variants/{patient}.raw.vcf.gz",
        contamination = lambda wildcards: get_contamination_tables(wildcards.patient),
        segments = lambda wildcards: get_segments_tables(wildcards.patient),
        ob_priors = "temp/orientation_models/{patient}.artifact_priors.tar.gz",
        stats = "temp/{patient}.vcf.merged_stats"
    output:
        vcf = "variants/{patient}.filtered.vcf.gz",
        filtering_stats = "variants/{patient}.filtered.vcf.stats"
    params:
        contamination = lambda wildcards, input: "".join(["--contamination-table %s " % file for file in input.contamination]),
        segments = lambda wildcards, input: " --tumor-segmentation ".join(input.segments)
    shell:
        """
        gatk FilterMutectCalls \\
            -V {input.vcf} \\
            -R ~/resources/hg38_for_bwa/hs38DH.fa \\
            -O {output.vcf} \\
            --tumor-segmentation {params.segments} \\
            --ob-priors {input.ob_priors} \\
            -stats {input.stats} \\
            --filtering-stats {output.filtering_stats} {params.contamination}
        """

##########################################
############ Annotate
##########################################

#rule funcotator:
#    input: "variants/{patient}.vcf.gz"
#    output: "variants/{patient}.avcf.gz"
#    shell:
#        """
#        ~/programs/gatk-4.1.8.0/gatk Funcotator \\
#            --variant {input} \\
#            --reference ~/resources/hg38_for_bwa/hs38DH.fa \\
#            --ref-version hg38 \\
#            --data-sources-path ~/resources/gatk/funcotator2/funcotator_dataSources.v1.7.20200521s \\
#            --output {output} \\
#            --output-file-format VCF
#        """

rule vep:
    input: "variants/{patient}.filtered.vcf.gz"
    output: "variants/{patient}.annot.vcf"
    shell:
        """
		export PATH=/usr/bin:$PATH
        srun vep -i {input} -o {output} --offline --vcf
        """
