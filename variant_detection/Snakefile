import pandas as pd
import os

os.makedirs("outputs", exist_ok=True)

samples = pd.read_csv("SraRunTable.txt")
samples["type_short"] = (
    samples.sample_type
    .str.replace("Single leucocyte", "luekocyte")
    .str.replace("Circulating tumor cell", "CTC")
    .str.replace("Bulk blood gDNA", "bulk")
    .str.replace("Primary tissue", "primary")
    .str.replace("Liver metastatic tissue", "metastasis")
    .str.replace("\(befor chemoterapy\)", "bch")
    .str.replace("\(befor chemoterapy\)", "bch")
    .str.replace("\(during first-line chemoterapy\)", "1ch")
    .str.replace("\(during second-line chemoterapy\)", "2ch")
    .str.replace(" ", "_")
)
samples["patient"] = samples.patient_id.str.replace("Patient", "P")
samples["lib_type"] = samples.Seqence_Type.str.replace("Exome", "WES")
samples["sample_name"] = samples.patient + "_" + samples.type_short + "_" + samples.lib_type

if not samples.sample_name.is_unique:
    print("Exiting because sample names are niot unique!")
    exit()

sample_name_to_srr = pd.Series(samples.Run.values, index=samples.sample_name).to_dict()
patients = ["P1"]
samples_P1 = samples.query("patient_id in ['Patient1'] and lib_type == 'WES'").sample_name
intervals = glob_wildcards('/home/pkus/resources/gatk/scattered_intervals_100/{interval}-scattered.interval_list').interval

###################################################
############ MAIN #################################
###################################################

def get_patient_tumor_samples(patient):
    q = 'patient == "%s" and lib_type == "WES" and type_short not in ["bulk", "luekocyte"]' % patient
    names = samples.query(q).sample_name
    return(names)

rule all:
    input:
        "raw_variants/P1.raw.vcf.gz",
        "raw_variants/P1.vcf.merged_stats",
        expand("calc_contamination_output/{sample}.contamination.table", sample=get_patient_tumor_samples("P1").tolist()),
        expand("calc_contamination_output/{sample}.segments.table", sample=get_patient_tumor_samples("P1").tolist()),
        "orientation_models/P1.artifact_priors.tar.gz",
        "filtered_variants/P1.vcf.gz",
        "filtered_variants/P1.vepped.vcf"
        # "filtered_variants/P1.avcf.gz"

##############################
############ Mutect2 part
##############################

# get only 2 tumor samples to speed up
def get_patient_bams_reduced(patient):
    normal = samples.query('patient == "%s" and lib_type == "WES" and type_short in ["luekocyte", "bulk"]' % patient).sample_name
    tumor = ["%s_CTC_1_WES" % patient, "%s_CTC_2_WES" % patient]
    names = normal.tolist() + tumor
    bams = ["bams/%s.final.bam" % s for s in names]
    return(bams)

def get_patient_bams(patient):
    names = samples.query('patient == "%s" and lib_type == "WES"' % patient).sample_name
    bams = ["/home/pkus/data/LUAD_LUSC_Wang_2013/bams/%s.final.bam" % s for s in names]
    return(bams)

def get_patient_normal_samples(patient):
    q = 'patient == "%s" and lib_type == "WES" and type_short in ["bulk", "luekocyte"]' % patient
    names = samples.query(q).sample_name
    return(names)

rule mutect2:
    input: lambda wildcards: get_patient_bams(wildcards.patient)
    output:
        vcf = "raw_variants/{patient}/{patient}.{interval}.vcf.gz",
        f1r2 = "raw_variants/{patient}/{patient}.{interval}.f1r2.tar.gz",
        stats = "raw_variants/{patient}/{patient}.{interval}.vcf.gz.stats"
    params:
        ref = "~/resources/hg38_for_bwa/hs38DH.fa",
        interval = "~/resources/gatk/scattered_intervals_100/{interval}-scattered.interval_list",
        input = lambda wildcards, input: " -I ".join(input),
        tumor_samples = lambda wildcards: " --tumor-sample ".join(get_patient_tumor_samples(wildcards.patient)),
        normal_samples = lambda wildcards: " --normal-sample ".join(get_patient_normal_samples(wildcards.patient))
    shell:
        """
        ~/programs/gatk-4.1.8.0/gatk Mutect2 \\
            -I {params.input} \\
            --normal-sample {params.normal_samples} \\
            -R {params.ref} \\
            -L {params.interval} \\
            --germline-resource ~/resources/gatk/af-only-gnomad.hg38.vcf.gz \\
            --f1r2-tar-gz {output.f1r2} \\
            -O {output.vcf}
        """

rule merge_vcf:
    input: ["raw_variants/{patient}/{patient}.%s.vcf.gz" % interval for interval in intervals]
    output: "raw_variants/{patient}.raw.vcf.gz"
    params:
        vcfs = lambda wildcards, input: " -I ".join(input)
    shell: "~/programs/gatk-4.1.8.0/gatk MergeVcfs -I {params.vcfs} -O {output}"

rule merge_mutect_stats:
    input: ["raw_variants/{patient}/{patient}.%s.vcf.gz.stats" % interval for interval in intervals]
    output: "raw_variants/{patient}.vcf.merged_stats"
    params:
        input = lambda wildcards, input: " --stats ".join(input)
    shell:
        """
        ~/programs/gatk-4.1.8.0/gatk MergeMutectStats \\
            --output {output} \\
            --stats {params.input}
        """


#################################################
############ Contamination / segmentation part
#################################################

rule get_pileup_summaries:
    input: "/home/pkus/data/LUAD_LUSC_Wang_2013/bams/{sample}.final.bam"
    output: "pileups/{sample}/{sample}.{interval}.pileups.table"
    params:
        interval = "~/resources/gatk/scattered_intervals_100/{interval}-scattered.interval_list"
    shell:
        """
        ~/programs/gatk-4.1.8.0/gatk GetPileupSummaries \\
            -I {input} \\
            -V ~/resources/gatk/af-only-gnomad.hg38.vcf.gz \\
            -L {params.interval} \\
            -O {output}
        """

rule gather_pileups:
    input: ["pileups/{sample}/{sample}.%s.pileups.table" % interval for interval in intervals]
    output: "pileups/{sample}.merged_pileups.table"
    params:
        input = lambda wildcards, input: " -I ".join(input)
    shell:
        """
        ~/programs/gatk-4.1.8.0/gatk GatherPileupSummaries \\
            --sequence-dictionary ~/resources/hg38_for_bwa/hs38DH.dict \\
            -I {params.input} \\
            -O {output}
        """

def get_paired_normal_pileups(tumor_sample):
    patient = samples.loc[samples.sample_name == tumor_sample, "patient"].tolist()[0]
    # CalculateContamination takes only one normal sample. I think that bulk is the better one
    # normal_samples = get_patient_normal_samples(patient).tolist()
    # pileups = ["pileups/%s.pileups.table" % sample for sample in normal_samples]
    normal_bulk = patient + "_bulk_WES"
    pileups = "pileups/%s.merged_pileups.table" % normal_bulk
    return(pileups)

rule calc_contamination:
    input:
        tumor_pileup = "pileups/{sample}.merged_pileups.table",
        normal_pileup = lambda wildcards: get_paired_normal_pileups(wildcards.sample)
    output:
        contamination = "calc_contamination_output/{sample}.contamination.table",
        segments = "calc_contamination_output/{sample}.segments.table"
    shell:
        """
        ~/programs/gatk-4.1.8.0/gatk CalculateContamination \\
            -I {input.tumor_pileup} \\
            -matched {input.normal_pileup} \\
            -segments {output.segments} \\
            -O {output.contamination}
        """

###############################################
############ Orientation bias artifacts part
###############################################

rule learn_orientation:
    input: ["raw_variants/{patient}/{patient}.%s.f1r2.tar.gz" % interval for interval in intervals]
    output: "orientation_models/{patient}.artifact_priors.tar.gz"
    params:
        input = lambda wildcards, input: " -I ".join(input)
    shell:
        """
        ~/programs/gatk-4.1.8.0/gatk LearnReadOrientationModel \\
            -I {params.input} \\
            -O {output}
        """

##############################
############ Filtering part
##############################

def get_contamination_tables(patient):
    samples = get_patient_tumor_samples(patient)
    tables = ["calc_contamination_output/%s.contamination.table" % sample for sample in samples]
    return(tables)

def get_segments_tables(patient):
    samples = get_patient_tumor_samples(patient)
    tables = ["calc_contamination_output/%s.segments.table" % sample for sample in samples]
    return(tables)

rule filter_calls:
    input:
        vcf = "raw_variants/{patient}.raw.vcf.gz",
        contamination = lambda wildcards: get_contamination_tables(wildcards.patient),
        segments = lambda wildcards: get_segments_tables(wildcards.patient),
        ob_priors = "orientation_models/{patient}.artifact_priors.tar.gz",
        stats = "raw_variants/{patient}.vcf.merged_stats"
    output:
        vcf = "filtered_variants/{patient}.vcf.gz",
        filtering_stats = "filtered_variants/{patient}.vcf.stats"
    params:
        ref = "~/resources/hg38_for_bwa/hs38DH.fa",
        contamination = lambda wildcards, input: " --contamination-table ".join(input.contamination),
        segments = lambda wildcards, input: " --tumor-segmentation ".join(input.segments)
    shell:
        """
        ~/programs/gatk-4.1.8.0/gatk FilterMutectCalls \\
            -V {input.vcf} \\
            -R {params.ref} \\
            -O {output.vcf} \\
            --contamination-table {params.contamination} \\
            --tumor-segmentation {params.segments} \\
            --ob-priors {input.ob_priors} \\
            -stats {input.stats} \\
            --filtering-stats {output.filtering_stats}
        """

rule funcotator:
    input: "filtered_variants/{patient}.vcf.gz"
    output: "filtered_variants/{patient}.avcf.gz"
    shell:
        """
        ~/programs/gatk-4.1.8.0/gatk Funcotator \\
            --variant {input} \\
            --reference ~/resources/hg38_for_bwa/hs38DH.fa \\
            --ref-version hg38 \\
            --data-sources-path ~/resources/gatk/funcotator2/funcotator_dataSources.v1.7.20200521s \\
            --output {output} \\
            --output-file-format VCF
        """

rule vep:
    input: "filtered_variants/{patient}.vcf.gz"
    output: "filtered_variants/{patient}.vepped.vcf"
    shell: "~/programs/vep/ensembl-vep/vep -i {input} -o {output} --offline --vcf"
